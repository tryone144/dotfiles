#!/usr/bin/env python3
# -*- coding: utf8 -*-
#
# I3WM
# custom status provider with fancy JSON tags for i3bar
#   needs: [!brain]
#          [NetworkManager]
#
# file: ~/.config/i3/i3bar-pystatus
# v0.2 / 2015.01.03
#
# (c) 2014 Bernd Busse
#
import signal
import struct
import sys
import time
# Date/Time support
from datetime import datetime
# Volume support
from scripts import volume
# NetworkManager support
from gi.repository import NetworkManager, NMClient
from ipaddress import ip_address

TIMEOUT_INTERVAL = 5    # 5 sec. updates
FG_COLOR = "#FFFFFF"

force_update = True

class ConfigError(Exception):
    pass

class JSONtag(object):
    """
    Basic JSON Tag

    generates complete formated tag.
    """
    def __init__(self, name=None, instance=None, color=None):
        self.full_text = ""
        self.name = name
        self.instance = instance
        self.color = color
        
        self.force_update = False

    def get_tag(self, update=False):
        if update or self.force_update:
            self.update()
        fmt = '{{"full_text": "{full_text}"'
        if self.name:
            fmt += ', "name": "{name}"'
        if self.instance:
            fmt += ', "instance": "{instance}"'
        if self.color:
            fmt += ', "color": "{color}"'
        fmt += '}}'
        return fmt.format(full_text=self.full_text, name=self.name, instance=self.instance, color=self.color)

    def update(self):
        raise NotImplementedError

class VolumeTag(JSONtag):
    """
    VOLUME Tag

    show volume level, only update when necesarry
    """
    def __init__(self):
        super(VolumeTag, self).__init__()
        #self.name = "volume"
        #self.instance = "default"

        self.color_mute = "#FF0000"

        self.update()

    def update(self):
        self.full_text = "VOL: " + volume.get_volume()
        self.color = self.color_mute if "mute" in self.full_text else None

class DateTag(JSONtag):
    """
    DATE Tag

    show date and time
    """
    def __init__(self):
        super(DateTag, self).__init__()
        #self.name = "clock"
        #self.instance = "local"

        self.foce_update = True

        self.update()

    def update(self):
        self.full_text = datetime.now().strftime("%a, %d. %b %H:%M")

class NetworkTag(JSONtag):
    """
    NETWORK Tag

    show network interface with ip
    """
    CONN_ETHERNET = 1
    CONN_WIRELESS = 2
    CONN_UNKNOWN = -1

    def __init__(self, device):
        super(NetworkTag, self).__init__()
        #self.name = "network"
        #self.instance = device

        self.device_name = device.upper()
        self.color_connected = "#00FF00"
        self.color_disconnected = "#FF0000"
        
        nmc = NMClient.Client.new()
        self.device = nmc.get_device_by_iface(device)
        if self.device == None:
            raise ConfigError("Can't find interface {0}".format(device))

        if "ethernet" in self.device.get_active_connection().get_connection_type():
            self.conn_type = self.CONN_ETHERNET
        elif "wireless" in self.device.get_active_connection().get_connection_type():
            self.conn_type = self.CONN_WIRELESS
        else:
            self.conn_type = self.CONN_UNKONW
        self.connected = False
        self.ip_address = ""

        self.update()

    def update(self):
        self.ip_address = str(ip_address(struct.pack("<L", self.device.get_ip4_config().get_addresses()[0].get_address())))
        self.connected = True if self.device.get_state() == NetworkManager.DeviceState.ACTIVATED else False
        self.full_text = self.device_name + ": " + self.ip_address
        self.color = self.color_connected if self.connected else self.color_disconnected

def set_proc_name(newname):
    """set proc_name for __killall__ signals"""
    from ctypes import cdll, byref, create_string_buffer
    libc = cdll.LoadLibrary('libc.so.6')
    buff = create_string_buffer(len(newname)+1)
    buff.value = bytes(newname, "utf8")
    libc.prctl(15, byref(buff), 0, 0, 0)

def recv_sig(signum, frame):
    # just recieve the signal
    global force_update
    force_update = True

def println(msg):
    """non-buffered output to __stdout__"""
    sys.stdout.write(msg + '\n,')
    sys.stdout.flush()

def generate_line(modules, force):
    output = "["
    for m in modules:
        output += m.get_tag(force) + ","
    output = output[:-1] + "]"
    println(output)
    force = False

def main():
    global force_update
    modules = []
    
    # init signal handler
    signal.signal(signal.SIGUSR1, recv_sig)
    signal.signal(signal.SIGUSR2, recv_sig)

    # init infinite json-strea
    sys.stdout.write('{"version": 1, "stop_signal": 19, "cont_signal": 18, "click_events": false}\n')
    sys.stdout.write('[\n')
    sys.stdout.flush()
    
    # add modules
    modules.append(VolumeTag())
    try:
        modules.append(NetworkTag("eth0"))
        modules.append(NetworkTag("wlan0"))
    except Exception:
        pass
    modules.append(DateTag())

    while True:
        generate_line(modules, force_update)
        time.sleep(TIMEOUT_INTERVAL)

if __name__ == '__main__':
    set_proc_name('i3bar-pystatus')
    main()

